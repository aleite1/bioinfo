class DNAstring < String
  # To change this template use File | Settings | File Templates.
  # DNAString - generic operations on a genome string.
  attr_accessor :genome

  def initialize(genome="")
    @genome=genome
  end

  # Returns a Hash of most repeated "k" size terms.
  def top_kterms(k)
    results_out = Hash.new
    max = 0
    self.find_kterms(k).each do |pattern, count|
      if count > max
        results_out={} #remove all previous, there's a new max...
        results_out[pattern]= count
        max = count
        # k-mer that repeats as often as current MAX - capture it.
      elsif count == max
        results_out[pattern] = count
      end
    end
    return results_out
  end

  #find patterns of size "k" and return a Hash with all...
  def find_kterms(k) #(genome, k)
    temp = @genome
    #debug puts temp
    results = Hash.new
    puts results
    #results_out = Hash.new
    max = 0
    while temp.length>k-1
      count = 0
      #Build pattern of k elements
      pattern = temp[0..k-1]
      #count = text.scan(/(?=#{pattern})/).size
      for i in 0..@genome.length do
        if @genome[i..i+k-1] == pattern
          (results[pattern].nil?) ? results[pattern]=1 : results[pattern] += 1 # Match if first then =1 otherwise increment by 1.
        end
      end
      # Remove first character from "temp" i.e. copy everything except 1st character locat at [0]
      temp = temp[1..temp.length]
    end
    return results
  end

  # return Array of indexes, "results", where "pattern" occurs
  def find_kterm_index(pattern) #, genome)
    results = []
    for i in 0..@genome.length do
      if @genome[i..i+pattern.length-1] == pattern
        results.push(i)
      end
    end
    return results #.keys.sort
  end

  #return Hash of clumps with kmers of size "k", in a "l" length window and that appear at least "t" times.
  def find_clumps(k, l, t)
    result = Hash.new
    for i in 0..@genome.length
      #puts i
      a=DNAstring.new
      a.genome = @genome[i..i+l-1]
     # puts a.genome
      #DNAstring.new(@genome[i..i+l-1]).find_kterms(k).each do |pattern, count|
      #puts a.find_kterms(k)
      a.find_kterms(k).each_pair do |pattern, count|
        if count >= t
          result[pattern] = count
      #    print "#{i} #{pattern} #{count}\n"
        end
      end
      #i=i+l
    end
    return result
  end


  # reverse a genome strand. returns a String.
  def reverse_strand #(genome)
    reverse = String.new
    @genome.each_char do |a|
      if a == "A"
        a = "T"
      elsif a =="T"
        a = "A"
      elsif a == "G"
        a="C"
      elsif a== "C"
        a="G"
      else
        return "Invalid nucleotide: ${a}"
      end
      reverse = "#{a}#{reverse}"
    end
    return reverse
  end
end

a= DNAstring.new("CGGACTCGACAGATGTGAAGAACGACAATGTGAAGACTCGACACGACAGAGTGAAGAGAAGAGGAAACATTGTAA")
puts a.find_clumps(5, 50, 4)

#TEST Case for ktermsAL
#a= DNAstring.new
#a.genome ="TACAGGGTACAGGGTTTGCTTAGTTGAACATTTGCTTAGGGTCGGTGTTGAACATACAGGGTACAGGGTTTGCTTACGGTTATGCTACAGGGGTTGAACAGGGTCGGTTACAGGGGGGTCGGTCGGTTATGCGGGTCGGTTTTGCTTACGGTTATGCGTTGAACACGGTTATGCTACAGGGTTTGCTTACGGTTATGCTACAGGGGTTGAACAGTTGAACAGTTGAACATTTGCTTACGGTTATGCGGGTCGGTTTTGCTTATACAGGGTTTGCTTAGGGTCGGTGTTGAACAGTTGAACAGTTGAACATACAGGGGTTGAACAGGGTCGGTGGGTCGGTGGGTCGGTTACAGGGCGGTTATGCGTTGAACAGGGTCGGTTACAGGGGGGTCGGTCGGTTATGCTACAGGGTTTGCTTATTTGCTTATTTGCTTACGGTTATGCTACAGGGCGGTTATGCGGGTCGGTTACAGGGTACAGGGTACAGGGTACAGGGTTTGCTTAGTTGAACATTTGCTTAGTTGAACATACAGGGTTTGCTTACGGTTATGCGTTGAACAGTTGAACATTTGCTTAGGGTCGGTGGGTCGGTTACAGGGTTTGCTTAGTTGAACATTTGCTTAGTTGAACAGTTGAACAGGGTCGGTTTTGCTTAGGGTCGGTTTTGCTTATTTGCTTACGGTTATGCCGGTTATGCGTTGAACATTTGCTTAGTTGAACACGGTTATGCGGGTCGGTTACAGGGTTTGCTTAGGGTCGGTCGGTTATGCGTTGAACATTTGCTTAGTTGAACATACAGGGTTTGCTTACGGTTATGCCGGTTATGCTTTGCTTATACAGGGCGGTTATGCGGGTCGGTGGGTCGGTTTTGCTTATTTGCTTAGTTGAACATTTGCTTACGGTTATGCCGGTTATGCTACAGGGCGGTTATGCTTTGCTTA"
#output
# TACAGGGTTTGCT
# ACAGGGTTTGCTT
# CAGGGTTTGCTTA
k = 13
#a.top_kterms(k).each { |k,v| puts k  }


# TEST CASE for kterms
#text ="CGGAAGCGAGATTCGCGTGGCGTGATTCCGGCGGGCGTGGAGAAGCGAGATTCATTCAAGCCGGGAGGCGTGGCGTGGCGTGGCGTGCGGATTCAAGCCGGCGGGCGTGATTCGAGCGGCGGATTCGAGATTCCGGGCGTGCGGGCGTGAAGCGCGTGGAGGAGGCGTGGCGTGCGGGAGGAGAAGCGAGAAGCCGGATTCAAGCAAGCATTCCGGCGGGAGATTCGCGTGGAGGCGTGGAGGCGTGGAGGCGTGCGGCGGGAGATTCAAGCCGGATTCGCGTGGAGAAGCGAGAAGCGCGTGCGGAAGCGAGGAGGAGAAGCATTCGCGTGATTCCGGGAGATTCAAGCATTCGCGTGCGGCGGGAGATTCAAGCGAGGAGGCGTGAAGCAAGCAAGCAAGCGCGTGGCGTGCGGCGGGAGAAGCAAGCGCGTGATTCGAGCGGGCGTGCGGAAGCGAGCGG"
#k= 11
#result = ""
#DNAstring.kterms_rubway(text, k).each do |elem, count|
#  result = result +"#{elem} "
#  puts "#{elem}:#{count}"
#end
#puts result

#TEST CASE for reverseStrand
#puts DNAstring.reverse_strand("GTTAAATTCGTGATTTGCGACGACAAGAACCCGTTAAGCGTCACGGCGGCTATCATTCTGTATTGTTGGCCCAACATCTTACAGTTGGTACGGGGGGGCCGTTATCTGCAGCCTGTGTGTACGACATGGCCCATACTTTGACGAATACAGGTATGTGACGGAACAGAGTAAATGTACGAGCTAATTACACCAGCGGCTTACAAGAGCTCAGCATCAGATCTATCACTTTTGCTCTAGGAGGGATAGTGGCTTCTCAAACACTATAATCCATCGAAAACATCTGAGTCTCGAGCTGCGGTCTATCAGCGGTTATAAACGAAGCCCCTCTTCAGGCTCCTACTCTGGTGTAAGCGGACTAGGCCGGCTTAGCACCATTACGATGGGTGACATCCGGGGAACTTACAGGTCCGAGTACGGTCCATTGCGATACACGAATCGCTCATTAATCGCTAACTAAGATAGGACTATAATTTCCGTCGGAGAACGATTTGTCTGCGGACTTTGGCACAGATATACCGGATAATCCACATGACGTCTTGCTCGTAGATGTATTGTTTGTCCAGGCAGATTATAGGGGCAAAGTCTCCTCGCGCATGACTGTACGTGCAGTGACGCAACACCAGCAGGTGTAATTGACTCGGACCGACATGCAGGCTCGATGTTAAATATTTGGTGACGGTTAATCCTTTCGTCAGCGGAGCAGGTGCGCCTTTCCATTGTATACGACTTGTTCTGACCGGCATCGACAAGGCTTGAGAGAACCTTTCGAGGGGATTAATCACACAGTGACAATACCAAATAAGTTCTATCGCCCACGATTGAGTCAGAGTGCGATGTTCCGTGTACTCAGAAGTAGCCCACTACACAGGTACTCTAATTGAAAAATACATGAACGACCCCCTGCACGGGTTCCAGGAGTGTGCAGGCCTTGACTCCCTTATCTGTATGTATCGTCTACCTTATATCTCTAATTCGGTGTAACCACTGATGCGGTTTTTAGGCGCCGGCAAACAGCAAGACCAGTTGCCGCCCTATCAGTGAGGCAAACGTTGTTAGCGACAGGCTTAATAGGTCAGCGAATCTGGTCATCGCTTTGTCCCTCGTACTGCAAGACAACTCAGACACTATCTCGATCGGCGTGAAGATGTGAGCATGTGTTATTAGAAACAATAAAGTTGATCTCTCACTTGGTTTTCCCAGAGACGTCCAGTTCTAACTCTGGCGGGGGTGGGGACTGCACTCCGCGAGTAGGGATGTTTATCACGCTATTCTTGTTTCATTCTATATGGTGATCTGACTCCGCCTTTCACTTCCTCTCATGAGGCAATGTGGAGACTTGAAGAAACACAGGGTTGAGCTGGCTGTATCGTAACTGACCGGTGTCGAAATCTCTAGCTAGGATCTGAGTTTCTCTCGGTCGCACACTACCGGCGCCATGCCTTCATCTTCCACCTCTGTAAATTTTATGCCTTCGCCTCCCTACCCCATACGCCTTAGTTTCTAAAGGGGAACGGCTATCAGATGGACATAGAAGTACCACAAATCCCTGGCTCCTCGACCCCGCGATCAGTGGTGGTGGAGGTGCGTATATGCGGCAGAGGGCTACGCAAATGAATACTACTAGACCCTATTGTTAGGAAGGTCCCAGGGCGACATTCACGCACTTGTGGGGATATCAAGTGATTGCGTCGAATTTGTATCTTGTCGAGCGTCGGGGCTTGCTGAAGAACGTGCGTGCCGTGCTGTGCAATCCTCTGTCCGCCTTTCCTCGCTATGTTTGACGACTTTAATCCTTTTATGGCTCCGTGACCCGGGTATGTAGACCTGATGTGCTCTCTGGATAAGTGAGTTCCAGTCGCGATGCCGGAGGAACCCTACAACGTTGTTGTCGCTCAGAAAAATTTAACCCACGTCTGCTTTTGGGCCTAAAACATACAGAAGTCATTTCTATCCACTATACCGAAGCCCTGTACCCCACATGCTCAAAATTAGCGCGACCATGACCGGACAGTCTGCACGCCTAAACGTGGTAGCCTTCTACCAATCACCATGGATGGACCGCGGAGTCCGCAAGTTTGTCCGCCGGAAATACGTGCTCTGCGCCTATGCGTGAATAAGGCCACAAGCAACTAGCAGACGGAGCACACGTCTTTCATTAGCACGTTGCATTATTGTGCACAATATAACTCATTTTGTTCCGCCTTACCCTGTCTCTAACGCCGGGTCTTGCCGGTCCTGAAACTGCCTACAACGCTGTCAGAGTTAGCGCGTAGACTTTAGTGAGTACGTCGAGCTTCGTGTCGGGCCACATTGCCGTAGCGCCTCTGCGTGGAAAGCCATCCTACGGCGAGTGAGTATGCACTGGAGTGTCCAAATTCGTGGTGAGTTCATCGCCCTTCCCCGGACGTAGTTCCTACTCCAGGGTAGATATATGGCTGAGGTTGGGAACTCTTGCTTCTCGAACTTGGCGTCCTCGTTCGTCGAGTATGCGATCATCCCCAGCACCTGTTCGTAACTAATAACTTCTATGCATAGCTGCCTCTGTATGCTGGTATTCACGGCTTGCATCGCTGTAAAAGTTTCACCTAATAGCTGTCGGTAGATAAGCCAAAAGTAGGCCCGGTGAAATTGTCCTTGCTTACATGTTCAATATAGAAGCACACGCCATGACCTGAAATAGACACGGCGCATGCTTAGATAGAACAAGCCGAGGCAGCAGCTCCCTTATTGCTTGTATGCTCGTATATCACTTTTCCTGTCCCACGTAAATAAGCAGTCTGTAGTTCGGTGATGTGCTATTCGAGCCTCTATCACCAAGAGTCAGTACCGCATCTTAACTGATGCATGCTCGGTTAGGCGTATTATAAGGATGACTACTGGGATAAAATGAACACGCTAGGGCTTGGAGAAATCCGTCTTAGGACAAACTAGTGGTAGACAGTCGGAAAGTTGTAGCGGTGAGTACAAGACCATTTTAGAGTGAACTCTGCCGAAAAGTACCTTTACAGAGTCCATGATGCGGAACCATTCCGCGCTCCAATAAGGAAAAATTCCCAATTCCAGTTATCAGCATAATGTCTAATCTTAGCTACCAGCAGTTGCTAGGATTACGTGTCTTGGGTGCGATAAACGATTCCGTTGATCCTACCCGCTAGTCCAGTAGCAAACTACCGCGGTTTCAAACGCTTGCATGGAATCAAAGCTTTAGATTTCTCTTACGCCTCCTGATAAGACCTGACGTGCGGTTCTAGCCGTCTCTTAATGTCCCCGGCAATGAAGCAGAGAATGAGGGTCTAAAATCGAGGACGCCCCAATCTACTGGATTGAATACTATGTCCCCCCGGTACATGAGAGCAATCGCGTAACACACCTTCGATTCGAGATGATCCTGTATCTTCAGTTCCAATCCTTTAAGGTTAAATCACTCATGTTTGCACATTACGCCCGCAACACGCGGTTTGACTGAGAGCGTGGTTCTCTGGGATAGATTCAGGTAAAAAGTCGTGCCACTAGGGGCTCAGGATTTCTCGTTGAGCAAAAATCTAGCTATTTCAACTCCAGCCATCGCTCTCGAAGCCATCGTGGTCCGGACCGCACCCCTTAGGTAAAATCCGCCAACGTCGAGGTACTGCTGAAAGCGTGGCCACCAATAGTCAGATCGGTTCGGTACGGGGTCGTGGCGGGCTTTCCTCTCGTACCCTTCAGGAGGATGGAGGATTTTACGTCTAGGAAGAGGCTAAGAGACCCTGGGTCCACAGGGGACGCGCGTAGGCGTAGCTGGCTTATCCGCGGGTCTTGTAAAGGATGAAGCGAGTGCACGTCCGAACTGGGCGGATTCAAGATGGTTGAACGGACTGTGCTTCCCTGGGAAGCCCCTCTCAGCCCGTGTCCCGTAGCCAAGCATTGCAGACCGTAAAGAGCGCTACAGTCCAACGCTAACGTGGGTCGCCCCTGCGATCCTTTGAGACGGTAGCTGTCGACGGTTGCCTAAGTGTAACCCGCTGGGTATGACCCCAGAATCGTATCACAAAGCAAAACAGTTATTGCAGCCGACGAGTCCGGCCGGTCCATGTCGTCAGTGCTTCTACCAGGATTGATCGAAACGGTGAGGTTCGCCACTTGATAGATAGTCCGGAGAGGTATTGAAGCTGGGGCCTGGGACCATGAGTGGATGCCCGTGAAATCTCGGTGACGCGTGCGGAGTGTATTCAAGGTGCCAGCTGTGTTGTCGGCGACACGGCTGTGGAACGCGTAAGAGAAGATAACCCTCTGCCTGGGTCGAAAACACCTAACTGATCGAAGTAATCAGGATTACTAGTGAATCAGAAAGATTCAACAAGGGTTGTATGCTATAGTATCGGAACACGTTCTGTAGGCGCCACATTGTTACTCTATCTGATATAACTCATCCTCACCTTTTCTCACTCACCGGACGGCCTGTAGACGGATTATCGGTATGTCGGGAAGGGAAGGGTTTTTAGGCCTGGGGACGAGGCGTGTCTCTGATTGAGACTTGTCCACTTCTTAACACTGAATAAGTATACCTAGTACTTGTATGCGGTGGTGTGGCCCATACGAGGCGTTTAGATAGTGCCCTTTCCCTGTACGAACGCGAATATGGAATGAAGCGTCGGTGGTACAACCCTCCACAGAGTGTGGGGCGAGAGTGTATTAAGGACCCACGACGATACGAAGAACCCCTGAATGCTAAAAGGCGGGTGAGCGTCCTCGCTGACTAAGCCGGAGACCGAAGGAAAGGCGCACGTGACTTGAAGGTATCTGTATCGTTGTTCTAGCAATTGGCCGAAGTTATTGCTTAAAGAAACAGCTGTCGGGTCATGACCCGTAACGCACTATTTCACCAATAGGTCAACTGCCACATCCTCCTCTATACGCGCCGCCGCTATGACGTGCCCCACAAGTGATCTACCTAATAAGATAACATGCGTAGCAGTAACGTGGTCCTTGCCCGTCGCTGCGACCCTCAGGAGAAAGTAGTAAGACTGTCAGAGAGTGTGAGAGAAATCCTTCGTTTTGAAAGATCGAACGGGGGTAGTCCAAATATATCAGTTCTTACAAAGGCCGGCTGCTGGCGTAACTCGGTGGAGTGAAAAACGTGCAATCAGCCATGGCTACGGGAGACCGTGCAGTATCCCAGCACAGAAGTAACCAAACATGACTTGCTGGAAAATTGGCGCTACCTCTTAGGTTAGTAGATTCCAGGATAAGGCTACGCTCTGATTCGGAGGTCAGCACCGGGTCAAAGGTGGTCAAGGATTTACTAGGTGTCCCGAGGCGGCACCAGAAATATCTATAGACTGACCGTTACGGGGTACCAAGCACTTATTGAGCGCCATAATTTATCCAGGGAGACGAAACCACACGAACGGAGCCAAAGGTCTATGCTGGGTTATGAGGAGAAGGTTGGTTACGCACTCTTGGAGGGTACTAGGGATGATTACCGGGATTAGAAACCCGTAGGGTGCCCCCCCCGTTGGCCTACCAGTGCATTATGAAGTTACGTGTTACCCAGATCTCCATGAAGGGCGTCCGTTTACTAAGGCCGGTCCTTCTGAAGGGCTCGTGTCGCTACACACACGTTTTCTGGAAGAGCAAGCTTGGCTAACGCATGTGCGGTCCAGATGGGATGCGCTTGCTCCCATAATTTTCTAAATGGAACGATGATCTACGGGCAAGATCTCAGCGGAGAGTACTAATCCGTGCGGCCTATACTGTTGTGGCAGCCCTTCCATGTACGCTACGTTCCAATCTTTCTTTGCGCATGATTCTCTGGCAGTAGGTCGGTACGATCCCGATCCCGCGGAAGGCGCAACTGAATAGAACGGCTTCAAGGCCCAATCGGGCGGTTAGGATTTCATGGGTCGTTGCACCAATAACGAACGGACGGCCCTGTCTATTGTCGTGTTATGTGGTAGATTAGGGTAGAAAGTAAACCCGGGACTAAGACAATATATGCAGGCGGCTTTTAATGCAAGCGGACGCCATTGGTAATCCTCTTGACCCATTCCCACTGGGTTCTATGGAACTTCTGGGGCCTGTTTGAAGTGACCTCCTATCTGTTCTCCGTTAGTGGGACACCGGCACGTCACGCGAGGCTGTCAATTTTAACGACGGGCGAGGTCTGCGGCTACTTGGGTAGCTCGCCTTCTCTCCAGTTTTATATGATCTTCTATCGTGTCAAGATCATCCGGAGTCTAGGCGGGGCTTCATACACGTTGGAGAGAACCCTCACTTCTCGTGGGCCTCTTTCAATAATATTGCGTTGGACCATGTAATGGGCCTTATACTCACGCCGCTTACTCAAAAAACAGTAGAAGAGCCCCCCAGGGCTCATAAATCAGAGTAATCAGTAGGTACGGGGGTCCTGTGTCAGGTGTACCAAAAAACTCCGCCATACTCATTTTGAGGGGACTCATCTAGCAAGCAGTTTAAACTCGCCCCAAAGCTAAACAACTCCATTATGTCGCGATTGAGCATGCCGGTCGGAACTGGACTAGGCCCGTGCAGTTGCTCACCTGCGAGAGAAGTTGATGTTGTAGCAACTAGCATGTAGAAAGAGGAGTACCAGTGCCTGTTCGATAGTTGTCTCGTGGGCAAATTGACTTCAACCTGTCCTTCGAGCGAGGCTTCCTCTCAATTGTAATTGCTCGAACTCATCTATGACCCAAGCGACAGACACTTTTTATGCAGAATAGCACATGCCTTACTAGCCCTGATGCTGCAAAGCTAACACGAGTTAGGTAAGCTAAGTGTGGGGAGAAATAGCCAGACGAATTGCAAGATTATACTAAGTAAATCAATATCATTCCATAACTTGGAAGAGTTGGTCACGGGACCAAGAGGGCTTGCGGGCCACCCAGGTACGGGAGCCAGAGACCGCAGTCGTGTTCACCGCTGTTGGCAATAGGATCGACAACAAGTTATTCGATAGGTGCTTCATTATTGTTTCATGGTCGGGGTCCGTAGAGAAATGAACCCGGCCTCAAATCATCCAACCGCTTGGTAATCGATAGCGGACCTACCGCCTTTCATTGCGCTTGTGAGTCTTGGTCAGATCTCACAACCGTGTGGGAACGTCCTCGCCACCTATTAATGGGAGCGGCGCAGATACGGTTCCTTAAAGAGTCGAGTAGTCACTAAGTTTGGCAGTGTAGGGTTACTCGACTCTCTTTCACCATCGACATACGCCGTCGACTAAGCAAGCTAAGCATTGGAGACACGTGCGCACATTGTCTAAAAGGCGCTGACGCTCCCGAGCGCTGGCTCACCTAAACTGGTGGATTAGCCGGTTTCAGTGATTAAAGGGTGAGGGGGCCGAAATCCAGGTTCCTCAGGAACACCGCAGGCATACTATTTCAAGTGTTGACCTCTAGACAGGCCCCGTACTCAACCTATCCTAGGCCTTGATAAGGATAGCATCCCGTTGCCTACGTCGCCTCAATTTACGTTCTGGCGATGGTATTGGGCTGACCTTTATTGCCCCGCCTCATCCATCCCACTGCGATTTGACTCGTCTCGTGAGGCTGCCAGAACCTCAAAGGGGAT")

#TEST CASE for find_kterm_index(pattern, genome)
#patter = "ACACCA"
#a.genome = "CCGAACACCCGTACACCGAACACCACACCACACCTTGCACACCACACCTACACCACACACCACACCGGACACCCACACCCACACCACGAACACCGAGAGTACACCTACACCTGACACCGGGGATCGTCACACCAAGTGGTGATACACCCACACCCTTTACACCTACACCACACCCGTACACCCTGAACACCACACCTAGAGAGTTGCACACCTCACACCGAAGGCACACCACACCATCCACACCATAAACACCGTTAACACCGTAGAACACCCAGCACACCCTTACCGCATACACCGACGTTAGACACCCACACCGGCAGTCACACCGTACACCCATTCGGTCCACACCCTACACCGCCTGCCACACCTACTGAGTTACACCGCATGACACCATTATCCGAACACACCAATATACACCAACACCATACACCATTTAACACCCCAAAACACCGACACCGACACCGCAAGCCCACACCACACCCACACCACAGACACCTACACCGTTTAGACACCAACACCGACACCACACCCCACACCCAAGACACCGCTACACCCTGCTGGACACCGACACCTACACCTCACACCGGACACCGCACACACCGCCACACCAATCACACCACACCACACCAGTACAACACCGACACCTACACCACACCACACCCAGATACACCCACACCGGACACCACACCAAACACCATTACACCCACACCGGTACACCACACCTCGTACACCAAGTAGACACCCAACACACCACACCTTGATGACACCTGACACCATACACCAAACACCACACCGAGGTAGACACCACACCGCCATCGACCACACCCTGACACCATACACCACACCACACCTAGTCGACACCCACACCCTCACACCTGACACCCGCGGCATACACCCACACCACTTACACCTACACCGGGGGAAACACCGAAACACCTCAACACCGGACACCACACCTAAGACACCGGGCGATACACCTGACCCTGACACCACACCACACCCAACACCCGAACACCACACCCAAACCTTGACACCCACACCAAAACACCCTTTATTAAAACACCCCGACCACCAAACACCACACCCCACACCGAACACCCACACCGCATACACCGGTCACACCTTATCTCGCCCACACCCTACACCCCACACCACACCACACCACACCGTACCACACCACACCCCCACACCAAAACACCACACCACACCGGTTACACCCCACACCAACACCCACACCATTACACCTACACCGCAACACCTGCACACCACACCAAGACTGGAGACACCTACCACACCCTCGTTTACACCACCTGACACCTTACACCTCCGACACCAAAAACCCGTTGGGTCATCGGATCAGGACACCTTTACACCACACCTTCGAGGACACCACGGACACCACACCCCACACCACACCGGTACACCGCGTTCACACCTCACACCGACACCACACCCCCTGAACTGTATACACCACACCACACCAACCCAACACCCTAGAAGACACCTGCCACACCTTACACCACACCACCGACACCAACACCCAAACACCTTTGACACACCACACCAACACCGTACACCGCAACACCCGCATTACACCTTACACCACACCACACCCCCCTACACCCACACCACACCCTCGGACACCAGTACACCACACCACAGATAGACACCATACACCTTACACCACATACACCTTTCACACCACACCCACACCCCGCTTAGACACCGACACCACACCACACCTGACACCACACCTCGCACACCGCCCTTACACCACACCCCAGCAGAAAACGAACACCCACACCACACCACACACCACACCACACCACACCGACACCTGACACCTAAACACCCCCACACCACACCTCTCCAACACCACACCAACACCTACACCAGAAAGACACCGACACCCGACACCCGCTGTTGTACACCCACACCATCGACACCACACCACACCACACCCTACACCGGCACACCATGCAAACACCACACACCTGGACACCCACACCACACCGCACACCACACCACACCTACACCACCGACACCACACCACACACCTACTCCACAACACCTACACCAAACACCCTACACCTACACCTACACCTACATACACCTACACCTAATATTATGGACACCACACCTTCAGACACCGTACACCACACACCCTATGTTACACCACAGGCAGAATTTGACACCTCACACCCACACCCACACCCGCACACCACACCAACACCACACCACACCCCCAACACCGCTCTTACACCTTACACCGACACCAACACCGACACCGACACCACACCCCAATATCCCTCACACCACACCTAACCAGTATACACCGTTGACAACACCCCAATTTACACCCCATACACCTCAGACCACACACCGGACGGGCAACACCTACACCGATGTTACTTTACACCGGGCTCGCGGACACCACTCGACACCAACACCCGACACCTTACACCACACCAGCTGCGTGAACACCTACACCATCCCAACACCACACCGACACCGTATGGACACCTACACCTCGAGAGTTCCGCTAGAACACCACACCCATACACCATACACCGCGTACACCGAACACCGACACCCACACCACACCCAATGACACCGATGACACCGGCTCGATACACCTACACCGAACACCATCAGACACCGCGTACACCCAACACCTGACACCAACACCGCGGCACACCTAGTGACACCTACACCTACACCACACCATACACCCTACACCGATGAACACCAACACCACTCTAAACACCCAGGACACCAACACACCTAGACACCACACCAACGACAGAGACACCCTACACCTGCCAAGCTTTACACCATTGGTGAATCACACACCACACCAACACCACACCACACCGCTTACACCCGACCCGAAAACACCCACACCACACCAACACCACACCACATTACTCCCGTTACACCTACACCAACACCACACCTTTACACCACACCCAGCAACACCACACCAAATGGACACCACACCACACCACACCTTAGCCGATGTGCCGACACCGCTGTCGTCACACCAGTGACACCTTAGCGTACACACCACACCCAACACCTACACCACACCCGAAACACCTGACACCACACCACACCACACCCTACACCACACCATGACCACACACCAGCCGACACCACACCATACACCTACACCGAAACACCTTTCTACACCACACCACACCTGAACACCTAGTCACACCACGACACCAACACCTGACCACACCGGGGGACACCTTTGGAACGACACCTAACACCGCCACACCACACCACACCCGACACCTATAACACCACACCACACCACACCAAAGGCACACCTTAACACCCACACCAAGGGCTACACCACACCACACCTCCAAAACAAGGGACACCACACCCAACACCACACCACACCGCGTGGACACCACACCTTGACACCAAATTGTGCACACCACACCTGCACACCTTAAGAACGACACCGTCAGTACACCGAAACCCTATGACACCTGGGACACCTGGCACACCAACTACACCACACCCACACCACACACCTGGACACCGTTTCGCGAGTGTGGGTTGCTTGACACCACACCACACCGCGGCCTTACACCGCACACCGTAAACACCGTTGACACCTCATTACTCGACACCACACCGCACACCCACACCCGACACCGAACACCACACCTGGGCATACACACCACACCGTACACCTACACCACACCTGTGCTACACCAGGGGTACACCACACCTAGTACACCACACCGATACACCCACACCACACCACACCCACCAACACCACACCATCAAGAACACCCTATACACCCACACCACACCTACACCACACCCTACACCACACCACACCACACCATCGACACCTACACCACACCAACACCACACCAAACACCACACCCACACCCGGACACCACACCCACACCACACCATAACACCTAACACCACACACCTACACCTACTCTGCTAAACACCCAACACCTCTACACCCTGCCGACACCGCGACACCGGCGACACCCTGTTACACCACACCTCACACCTTCGACACCAGCCAGAGACACCGGACACCGACACCCCGAACACCAACACACCCGA"
#a.find_kterm_index(patter).each { |a| print "#{a} " }