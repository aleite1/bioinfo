class DNAstring < String
  # To change this template use File | Settings | File Templates.
  #
  # kterms: Find "k" size repeating patterns in "text" string.
  # Explanation: Will create a "temp" copy of "text" and check how many times first K chars repeat in whole string.
  #              At the end, remove first character from "temp" and start process again.
  attr_accessor :genome

  def initialize(genome="")
    @genome=genome
  end

  def self.kterms_rubway(genome, k)
    temp = genome
    results = Hash.new
    max = 0
    while temp.length>k-1
      count = 0
      #Build pattern of k elements
      pattern = temp[0..k-1]
      count = genome.scan(/(?=#{pattern})/).size
      # More repeated Kmer found - replace previous.
      if (count > max)
        results={} #remove all previous, there's a new max...
        results[pattern]= count
        max = count
        # k-mer that repeats as often as current MAX - capture it.
      elsif (count == max)
        results[pattern] = count
      end
      # Remove first character from "temp" i.e. copy everything except 1st character locat at [0]
      temp = temp[1..temp.length]
    end
    return results #.keys.sort
  end

  def find_kterms(k)   #(genome, k)
    temp = @genome
    results = Hash.new
    results_out = Hash.new
    max = 0
    while temp.length>k-1
      count = 0
      #Build pattern of k elements
      pattern = temp[0..k-1]
      #count = text.scan(/(?=#{pattern})/).size
      for i in 0..@genome.length do
        if @genome[i..i+k-1] == pattern
          (results[pattern].nil?) ? results[pattern]=1 : results[pattern] += 1 # Match if first then =1 otherwise increment by 1.
        end
      end
      # Remove first character from "temp" i.e. copy everything except 1st character locat at [0]
      temp = temp[1..temp.length]
    end
    #select strands that are more often repeated and prepare return in "return_out"
    results.each do |pattern, count|
      if (count > max)
        results_out={} #remove all previous, there's a new max...
        results_out[pattern]= count
        max = count
        # k-mer that repeats as often as current MAX - capture it.
      elsif (count == max)
        results_out[pattern] = count
      end
    end
    return results_out #.keys.sort
  end

  def find_kterm_index(pattern)#, genome)
    results = []
      for i in 0..@genome.length do
        if @genome[i..i+pattern.length-1] == pattern
          results.push(i)
        end
      end
    return results #.keys.sort
  end


  def reverse_strand #(genome)
    reverse = String.new
    @genome.each_char do |a|
      if a == "A"
        a = "T"
      elsif a =="T"
        a = "A"
      elsif a == "G"
        a="C"
      elsif a== "C"
        a="G"
      else
        return "Invalid nucleotide: ${a}"
      end
      reverse = "#{a}#{reverse}"
    end
    return reverse
  end
end
#a = DNAstring.new("GTTAAATTC")
#puts a.reverse_strand
#a.genome = "GTTAAATTC"
#puts a.reverse_strand

#TEST Case for ktermsAL
#a.genome ="TACAGGGTACAGGGTTTGCTTAGTTGAACATTTGCTTAGGGTCGGTGTTGAACATACAGGGTACAGGGTTTGCTTACGGTTATGCTACAGGGGTTGAACAGGGTCGGTTACAGGGGGGTCGGTCGGTTATGCGGGTCGGTTTTGCTTACGGTTATGCGTTGAACACGGTTATGCTACAGGGTTTGCTTACGGTTATGCTACAGGGGTTGAACAGTTGAACAGTTGAACATTTGCTTACGGTTATGCGGGTCGGTTTTGCTTATACAGGGTTTGCTTAGGGTCGGTGTTGAACAGTTGAACAGTTGAACATACAGGGGTTGAACAGGGTCGGTGGGTCGGTGGGTCGGTTACAGGGCGGTTATGCGTTGAACAGGGTCGGTTACAGGGGGGTCGGTCGGTTATGCTACAGGGTTTGCTTATTTGCTTATTTGCTTACGGTTATGCTACAGGGCGGTTATGCGGGTCGGTTACAGGGTACAGGGTACAGGGTACAGGGTTTGCTTAGTTGAACATTTGCTTAGTTGAACATACAGGGTTTGCTTACGGTTATGCGTTGAACAGTTGAACATTTGCTTAGGGTCGGTGGGTCGGTTACAGGGTTTGCTTAGTTGAACATTTGCTTAGTTGAACAGTTGAACAGGGTCGGTTTTGCTTAGGGTCGGTTTTGCTTATTTGCTTACGGTTATGCCGGTTATGCGTTGAACATTTGCTTAGTTGAACACGGTTATGCGGGTCGGTTACAGGGTTTGCTTAGGGTCGGTCGGTTATGCGTTGAACATTTGCTTAGTTGAACATACAGGGTTTGCTTACGGTTATGCCGGTTATGCTTTGCTTATACAGGGCGGTTATGCGGGTCGGTGGGTCGGTTTTGCTTATTTGCTTAGTTGAACATTTGCTTACGGTTATGCCGGTTATGCTACAGGGCGGTTATGCTTTGCTTA"
#output
# TACAGGGTTTGCT
# ACAGGGTTTGCTT
# CAGGGTTTGCTTA
#k = 13
#a.find_kterms(k).each { |k,v| puts k  }


# TEST CASE for kterms
#text ="CGGAAGCGAGATTCGCGTGGCGTGATTCCGGCGGGCGTGGAGAAGCGAGATTCATTCAAGCCGGGAGGCGTGGCGTGGCGTGGCGTGCGGATTCAAGCCGGCGGGCGTGATTCGAGCGGCGGATTCGAGATTCCGGGCGTGCGGGCGTGAAGCGCGTGGAGGAGGCGTGGCGTGCGGGAGGAGAAGCGAGAAGCCGGATTCAAGCAAGCATTCCGGCGGGAGATTCGCGTGGAGGCGTGGAGGCGTGGAGGCGTGCGGCGGGAGATTCAAGCCGGATTCGCGTGGAGAAGCGAGAAGCGCGTGCGGAAGCGAGGAGGAGAAGCATTCGCGTGATTCCGGGAGATTCAAGCATTCGCGTGCGGCGGGAGATTCAAGCGAGGAGGCGTGAAGCAAGCAAGCAAGCGCGTGGCGTGCGGCGGGAGAAGCAAGCGCGTGATTCGAGCGGGCGTGCGGAAGCGAGCGG"
#k= 11
#result = ""
#DNAstring.kterms_rubway(text, k).each do |elem, count|
#  result = result +"#{elem} "
#  puts "#{elem}:#{count}"
#end
#puts result

#TEST CASE for reverseStrand
#puts DNAstring.reverse_strand("GTTAAATTCGTGATTTGCGACGACAAGAACCCGTTAAGCGTCACGGCGGCTATCATTCTGTATTGTTGGCCCAACATCTTACAGTTGGTACGGGGGGGCCGTTATCTGCAGCCTGTGTGTACGACATGGCCCATACTTTGACGAATACAGGTATGTGACGGAACAGAGTAAATGTACGAGCTAATTACACCAGCGGCTTACAAGAGCTCAGCATCAGATCTATCACTTTTGCTCTAGGAGGGATAGTGGCTTCTCAAACACTATAATCCATCGAAAACATCTGAGTCTCGAGCTGCGGTCTATCAGCGGTTATAAACGAAGCCCCTCTTCAGGCTCCTACTCTGGTGTAAGCGGACTAGGCCGGCTTAGCACCATTACGATGGGTGACATCCGGGGAACTTACAGGTCCGAGTACGGTCCATTGCGATACACGAATCGCTCATTAATCGCTAACTAAGATAGGACTATAATTTCCGTCGGAGAACGATTTGTCTGCGGACTTTGGCACAGATATACCGGATAATCCACATGACGTCTTGCTCGTAGATGTATTGTTTGTCCAGGCAGATTATAGGGGCAAAGTCTCCTCGCGCATGACTGTACGTGCAGTGACGCAACACCAGCAGGTGTAATTGACTCGGACCGACATGCAGGCTCGATGTTAAATATTTGGTGACGGTTAATCCTTTCGTCAGCGGAGCAGGTGCGCCTTTCCATTGTATACGACTTGTTCTGACCGGCATCGACAAGGCTTGAGAGAACCTTTCGAGGGGATTAATCACACAGTGACAATACCAAATAAGTTCTATCGCCCACGATTGAGTCAGAGTGCGATGTTCCGTGTACTCAGAAGTAGCCCACTACACAGGTACTCTAATTGAAAAATACATGAACGACCCCCTGCACGGGTTCCAGGAGTGTGCAGGCCTTGACTCCCTTATCTGTATGTATCGTCTACCTTATATCTCTAATTCGGTGTAACCACTGATGCGGTTTTTAGGCGCCGGCAAACAGCAAGACCAGTTGCCGCCCTATCAGTGAGGCAAACGTTGTTAGCGACAGGCTTAATAGGTCAGCGAATCTGGTCATCGCTTTGTCCCTCGTACTGCAAGACAACTCAGACACTATCTCGATCGGCGTGAAGATGTGAGCATGTGTTATTAGAAACAATAAAGTTGATCTCTCACTTGGTTTTCCCAGAGACGTCCAGTTCTAACTCTGGCGGGGGTGGGGACTGCACTCCGCGAGTAGGGATGTTTATCACGCTATTCTTGTTTCATTCTATATGGTGATCTGACTCCGCCTTTCACTTCCTCTCATGAGGCAATGTGGAGACTTGAAGAAACACAGGGTTGAGCTGGCTGTATCGTAACTGACCGGTGTCGAAATCTCTAGCTAGGATCTGAGTTTCTCTCGGTCGCACACTACCGGCGCCATGCCTTCATCTTCCACCTCTGTAAATTTTATGCCTTCGCCTCCCTACCCCATACGCCTTAGTTTCTAAAGGGGAACGGCTATCAGATGGACATAGAAGTACCACAAATCCCTGGCTCCTCGACCCCGCGATCAGTGGTGGTGGAGGTGCGTATATGCGGCAGAGGGCTACGCAAATGAATACTACTAGACCCTATTGTTAGGAAGGTCCCAGGGCGACATTCACGCACTTGTGGGGATATCAAGTGATTGCGTCGAATTTGTATCTTGTCGAGCGTCGGGGCTTGCTGAAGAACGTGCGTGCCGTGCTGTGCAATCCTCTGTCCGCCTTTCCTCGCTATGTTTGACGACTTTAATCCTTTTATGGCTCCGTGACCCGGGTATGTAGACCTGATGTGCTCTCTGGATAAGTGAGTTCCAGTCGCGATGCCGGAGGAACCCTACAACGTTGTTGTCGCTCAGAAAAATTTAACCCACGTCTGCTTTTGGGCCTAAAACATACAGAAGTCATTTCTATCCACTATACCGAAGCCCTGTACCCCACATGCTCAAAATTAGCGCGACCATGACCGGACAGTCTGCACGCCTAAACGTGGTAGCCTTCTACCAATCACCATGGATGGACCGCGGAGTCCGCAAGTTTGTCCGCCGGAAATACGTGCTCTGCGCCTATGCGTGAATAAGGCCACAAGCAACTAGCAGACGGAGCACACGTCTTTCATTAGCACGTTGCATTATTGTGCACAATATAACTCATTTTGTTCCGCCTTACCCTGTCTCTAACGCCGGGTCTTGCCGGTCCTGAAACTGCCTACAACGCTGTCAGAGTTAGCGCGTAGACTTTAGTGAGTACGTCGAGCTTCGTGTCGGGCCACATTGCCGTAGCGCCTCTGCGTGGAAAGCCATCCTACGGCGAGTGAGTATGCACTGGAGTGTCCAAATTCGTGGTGAGTTCATCGCCCTTCCCCGGACGTAGTTCCTACTCCAGGGTAGATATATGGCTGAGGTTGGGAACTCTTGCTTCTCGAACTTGGCGTCCTCGTTCGTCGAGTATGCGATCATCCCCAGCACCTGTTCGTAACTAATAACTTCTATGCATAGCTGCCTCTGTATGCTGGTATTCACGGCTTGCATCGCTGTAAAAGTTTCACCTAATAGCTGTCGGTAGATAAGCCAAAAGTAGGCCCGGTGAAATTGTCCTTGCTTACATGTTCAATATAGAAGCACACGCCATGACCTGAAATAGACACGGCGCATGCTTAGATAGAACAAGCCGAGGCAGCAGCTCCCTTATTGCTTGTATGCTCGTATATCACTTTTCCTGTCCCACGTAAATAAGCAGTCTGTAGTTCGGTGATGTGCTATTCGAGCCTCTATCACCAAGAGTCAGTACCGCATCTTAACTGATGCATGCTCGGTTAGGCGTATTATAAGGATGACTACTGGGATAAAATGAACACGCTAGGGCTTGGAGAAATCCGTCTTAGGACAAACTAGTGGTAGACAGTCGGAAAGTTGTAGCGGTGAGTACAAGACCATTTTAGAGTGAACTCTGCCGAAAAGTACCTTTACAGAGTCCATGATGCGGAACCATTCCGCGCTCCAATAAGGAAAAATTCCCAATTCCAGTTATCAGCATAATGTCTAATCTTAGCTACCAGCAGTTGCTAGGATTACGTGTCTTGGGTGCGATAAACGATTCCGTTGATCCTACCCGCTAGTCCAGTAGCAAACTACCGCGGTTTCAAACGCTTGCATGGAATCAAAGCTTTAGATTTCTCTTACGCCTCCTGATAAGACCTGACGTGCGGTTCTAGCCGTCTCTTAATGTCCCCGGCAATGAAGCAGAGAATGAGGGTCTAAAATCGAGGACGCCCCAATCTACTGGATTGAATACTATGTCCCCCCGGTACATGAGAGCAATCGCGTAACACACCTTCGATTCGAGATGATCCTGTATCTTCAGTTCCAATCCTTTAAGGTTAAATCACTCATGTTTGCACATTACGCCCGCAACACGCGGTTTGACTGAGAGCGTGGTTCTCTGGGATAGATTCAGGTAAAAAGTCGTGCCACTAGGGGCTCAGGATTTCTCGTTGAGCAAAAATCTAGCTATTTCAACTCCAGCCATCGCTCTCGAAGCCATCGTGGTCCGGACCGCACCCCTTAGGTAAAATCCGCCAACGTCGAGGTACTGCTGAAAGCGTGGCCACCAATAGTCAGATCGGTTCGGTACGGGGTCGTGGCGGGCTTTCCTCTCGTACCCTTCAGGAGGATGGAGGATTTTACGTCTAGGAAGAGGCTAAGAGACCCTGGGTCCACAGGGGACGCGCGTAGGCGTAGCTGGCTTATCCGCGGGTCTTGTAAAGGATGAAGCGAGTGCACGTCCGAACTGGGCGGATTCAAGATGGTTGAACGGACTGTGCTTCCCTGGGAAGCCCCTCTCAGCCCGTGTCCCGTAGCCAAGCATTGCAGACCGTAAAGAGCGCTACAGTCCAACGCTAACGTGGGTCGCCCCTGCGATCCTTTGAGACGGTAGCTGTCGACGGTTGCCTAAGTGTAACCCGCTGGGTATGACCCCAGAATCGTATCACAAAGCAAAACAGTTATTGCAGCCGACGAGTCCGGCCGGTCCATGTCGTCAGTGCTTCTACCAGGATTGATCGAAACGGTGAGGTTCGCCACTTGATAGATAGTCCGGAGAGGTATTGAAGCTGGGGCCTGGGACCATGAGTGGATGCCCGTGAAATCTCGGTGACGCGTGCGGAGTGTATTCAAGGTGCCAGCTGTGTTGTCGGCGACACGGCTGTGGAACGCGTAAGAGAAGATAACCCTCTGCCTGGGTCGAAAACACCTAACTGATCGAAGTAATCAGGATTACTAGTGAATCAGAAAGATTCAACAAGGGTTGTATGCTATAGTATCGGAACACGTTCTGTAGGCGCCACATTGTTACTCTATCTGATATAACTCATCCTCACCTTTTCTCACTCACCGGACGGCCTGTAGACGGATTATCGGTATGTCGGGAAGGGAAGGGTTTTTAGGCCTGGGGACGAGGCGTGTCTCTGATTGAGACTTGTCCACTTCTTAACACTGAATAAGTATACCTAGTACTTGTATGCGGTGGTGTGGCCCATACGAGGCGTTTAGATAGTGCCCTTTCCCTGTACGAACGCGAATATGGAATGAAGCGTCGGTGGTACAACCCTCCACAGAGTGTGGGGCGAGAGTGTATTAAGGACCCACGACGATACGAAGAACCCCTGAATGCTAAAAGGCGGGTGAGCGTCCTCGCTGACTAAGCCGGAGACCGAAGGAAAGGCGCACGTGACTTGAAGGTATCTGTATCGTTGTTCTAGCAATTGGCCGAAGTTATTGCTTAAAGAAACAGCTGTCGGGTCATGACCCGTAACGCACTATTTCACCAATAGGTCAACTGCCACATCCTCCTCTATACGCGCCGCCGCTATGACGTGCCCCACAAGTGATCTACCTAATAAGATAACATGCGTAGCAGTAACGTGGTCCTTGCCCGTCGCTGCGACCCTCAGGAGAAAGTAGTAAGACTGTCAGAGAGTGTGAGAGAAATCCTTCGTTTTGAAAGATCGAACGGGGGTAGTCCAAATATATCAGTTCTTACAAAGGCCGGCTGCTGGCGTAACTCGGTGGAGTGAAAAACGTGCAATCAGCCATGGCTACGGGAGACCGTGCAGTATCCCAGCACAGAAGTAACCAAACATGACTTGCTGGAAAATTGGCGCTACCTCTTAGGTTAGTAGATTCCAGGATAAGGCTACGCTCTGATTCGGAGGTCAGCACCGGGTCAAAGGTGGTCAAGGATTTACTAGGTGTCCCGAGGCGGCACCAGAAATATCTATAGACTGACCGTTACGGGGTACCAAGCACTTATTGAGCGCCATAATTTATCCAGGGAGACGAAACCACACGAACGGAGCCAAAGGTCTATGCTGGGTTATGAGGAGAAGGTTGGTTACGCACTCTTGGAGGGTACTAGGGATGATTACCGGGATTAGAAACCCGTAGGGTGCCCCCCCCGTTGGCCTACCAGTGCATTATGAAGTTACGTGTTACCCAGATCTCCATGAAGGGCGTCCGTTTACTAAGGCCGGTCCTTCTGAAGGGCTCGTGTCGCTACACACACGTTTTCTGGAAGAGCAAGCTTGGCTAACGCATGTGCGGTCCAGATGGGATGCGCTTGCTCCCATAATTTTCTAAATGGAACGATGATCTACGGGCAAGATCTCAGCGGAGAGTACTAATCCGTGCGGCCTATACTGTTGTGGCAGCCCTTCCATGTACGCTACGTTCCAATCTTTCTTTGCGCATGATTCTCTGGCAGTAGGTCGGTACGATCCCGATCCCGCGGAAGGCGCAACTGAATAGAACGGCTTCAAGGCCCAATCGGGCGGTTAGGATTTCATGGGTCGTTGCACCAATAACGAACGGACGGCCCTGTCTATTGTCGTGTTATGTGGTAGATTAGGGTAGAAAGTAAACCCGGGACTAAGACAATATATGCAGGCGGCTTTTAATGCAAGCGGACGCCATTGGTAATCCTCTTGACCCATTCCCACTGGGTTCTATGGAACTTCTGGGGCCTGTTTGAAGTGACCTCCTATCTGTTCTCCGTTAGTGGGACACCGGCACGTCACGCGAGGCTGTCAATTTTAACGACGGGCGAGGTCTGCGGCTACTTGGGTAGCTCGCCTTCTCTCCAGTTTTATATGATCTTCTATCGTGTCAAGATCATCCGGAGTCTAGGCGGGGCTTCATACACGTTGGAGAGAACCCTCACTTCTCGTGGGCCTCTTTCAATAATATTGCGTTGGACCATGTAATGGGCCTTATACTCACGCCGCTTACTCAAAAAACAGTAGAAGAGCCCCCCAGGGCTCATAAATCAGAGTAATCAGTAGGTACGGGGGTCCTGTGTCAGGTGTACCAAAAAACTCCGCCATACTCATTTTGAGGGGACTCATCTAGCAAGCAGTTTAAACTCGCCCCAAAGCTAAACAACTCCATTATGTCGCGATTGAGCATGCCGGTCGGAACTGGACTAGGCCCGTGCAGTTGCTCACCTGCGAGAGAAGTTGATGTTGTAGCAACTAGCATGTAGAAAGAGGAGTACCAGTGCCTGTTCGATAGTTGTCTCGTGGGCAAATTGACTTCAACCTGTCCTTCGAGCGAGGCTTCCTCTCAATTGTAATTGCTCGAACTCATCTATGACCCAAGCGACAGACACTTTTTATGCAGAATAGCACATGCCTTACTAGCCCTGATGCTGCAAAGCTAACACGAGTTAGGTAAGCTAAGTGTGGGGAGAAATAGCCAGACGAATTGCAAGATTATACTAAGTAAATCAATATCATTCCATAACTTGGAAGAGTTGGTCACGGGACCAAGAGGGCTTGCGGGCCACCCAGGTACGGGAGCCAGAGACCGCAGTCGTGTTCACCGCTGTTGGCAATAGGATCGACAACAAGTTATTCGATAGGTGCTTCATTATTGTTTCATGGTCGGGGTCCGTAGAGAAATGAACCCGGCCTCAAATCATCCAACCGCTTGGTAATCGATAGCGGACCTACCGCCTTTCATTGCGCTTGTGAGTCTTGGTCAGATCTCACAACCGTGTGGGAACGTCCTCGCCACCTATTAATGGGAGCGGCGCAGATACGGTTCCTTAAAGAGTCGAGTAGTCACTAAGTTTGGCAGTGTAGGGTTACTCGACTCTCTTTCACCATCGACATACGCCGTCGACTAAGCAAGCTAAGCATTGGAGACACGTGCGCACATTGTCTAAAAGGCGCTGACGCTCCCGAGCGCTGGCTCACCTAAACTGGTGGATTAGCCGGTTTCAGTGATTAAAGGGTGAGGGGGCCGAAATCCAGGTTCCTCAGGAACACCGCAGGCATACTATTTCAAGTGTTGACCTCTAGACAGGCCCCGTACTCAACCTATCCTAGGCCTTGATAAGGATAGCATCCCGTTGCCTACGTCGCCTCAATTTACGTTCTGGCGATGGTATTGGGCTGACCTTTATTGCCCCGCCTCATCCATCCCACTGCGATTTGACTCGTCTCGTGAGGCTGCCAGAACCTCAAAGGGGAT")

#TEST CASE for find_kterm_index(pattern, genome)
#patter = "ACACCA"
#a.genome = "CCGAACACCCGTACACCGAACACCACACCACACCTTGCACACCACACCTACACCACACACCACACCGGACACCCACACCCACACCACGAACACCGAGAGTACACCTACACCTGACACCGGGGATCGTCACACCAAGTGGTGATACACCCACACCCTTTACACCTACACCACACCCGTACACCCTGAACACCACACCTAGAGAGTTGCACACCTCACACCGAAGGCACACCACACCATCCACACCATAAACACCGTTAACACCGTAGAACACCCAGCACACCCTTACCGCATACACCGACGTTAGACACCCACACCGGCAGTCACACCGTACACCCATTCGGTCCACACCCTACACCGCCTGCCACACCTACTGAGTTACACCGCATGACACCATTATCCGAACACACCAATATACACCAACACCATACACCATTTAACACCCCAAAACACCGACACCGACACCGCAAGCCCACACCACACCCACACCACAGACACCTACACCGTTTAGACACCAACACCGACACCACACCCCACACCCAAGACACCGCTACACCCTGCTGGACACCGACACCTACACCTCACACCGGACACCGCACACACCGCCACACCAATCACACCACACCACACCAGTACAACACCGACACCTACACCACACCACACCCAGATACACCCACACCGGACACCACACCAAACACCATTACACCCACACCGGTACACCACACCTCGTACACCAAGTAGACACCCAACACACCACACCTTGATGACACCTGACACCATACACCAAACACCACACCGAGGTAGACACCACACCGCCATCGACCACACCCTGACACCATACACCACACCACACCTAGTCGACACCCACACCCTCACACCTGACACCCGCGGCATACACCCACACCACTTACACCTACACCGGGGGAAACACCGAAACACCTCAACACCGGACACCACACCTAAGACACCGGGCGATACACCTGACCCTGACACCACACCACACCCAACACCCGAACACCACACCCAAACCTTGACACCCACACCAAAACACCCTTTATTAAAACACCCCGACCACCAAACACCACACCCCACACCGAACACCCACACCGCATACACCGGTCACACCTTATCTCGCCCACACCCTACACCCCACACCACACCACACCACACCGTACCACACCACACCCCCACACCAAAACACCACACCACACCGGTTACACCCCACACCAACACCCACACCATTACACCTACACCGCAACACCTGCACACCACACCAAGACTGGAGACACCTACCACACCCTCGTTTACACCACCTGACACCTTACACCTCCGACACCAAAAACCCGTTGGGTCATCGGATCAGGACACCTTTACACCACACCTTCGAGGACACCACGGACACCACACCCCACACCACACCGGTACACCGCGTTCACACCTCACACCGACACCACACCCCCTGAACTGTATACACCACACCACACCAACCCAACACCCTAGAAGACACCTGCCACACCTTACACCACACCACCGACACCAACACCCAAACACCTTTGACACACCACACCAACACCGTACACCGCAACACCCGCATTACACCTTACACCACACCACACCCCCCTACACCCACACCACACCCTCGGACACCAGTACACCACACCACAGATAGACACCATACACCTTACACCACATACACCTTTCACACCACACCCACACCCCGCTTAGACACCGACACCACACCACACCTGACACCACACCTCGCACACCGCCCTTACACCACACCCCAGCAGAAAACGAACACCCACACCACACCACACACCACACCACACCACACCGACACCTGACACCTAAACACCCCCACACCACACCTCTCCAACACCACACCAACACCTACACCAGAAAGACACCGACACCCGACACCCGCTGTTGTACACCCACACCATCGACACCACACCACACCACACCCTACACCGGCACACCATGCAAACACCACACACCTGGACACCCACACCACACCGCACACCACACCACACCTACACCACCGACACCACACCACACACCTACTCCACAACACCTACACCAAACACCCTACACCTACACCTACACCTACATACACCTACACCTAATATTATGGACACCACACCTTCAGACACCGTACACCACACACCCTATGTTACACCACAGGCAGAATTTGACACCTCACACCCACACCCACACCCGCACACCACACCAACACCACACCACACCCCCAACACCGCTCTTACACCTTACACCGACACCAACACCGACACCGACACCACACCCCAATATCCCTCACACCACACCTAACCAGTATACACCGTTGACAACACCCCAATTTACACCCCATACACCTCAGACCACACACCGGACGGGCAACACCTACACCGATGTTACTTTACACCGGGCTCGCGGACACCACTCGACACCAACACCCGACACCTTACACCACACCAGCTGCGTGAACACCTACACCATCCCAACACCACACCGACACCGTATGGACACCTACACCTCGAGAGTTCCGCTAGAACACCACACCCATACACCATACACCGCGTACACCGAACACCGACACCCACACCACACCCAATGACACCGATGACACCGGCTCGATACACCTACACCGAACACCATCAGACACCGCGTACACCCAACACCTGACACCAACACCGCGGCACACCTAGTGACACCTACACCTACACCACACCATACACCCTACACCGATGAACACCAACACCACTCTAAACACCCAGGACACCAACACACCTAGACACCACACCAACGACAGAGACACCCTACACCTGCCAAGCTTTACACCATTGGTGAATCACACACCACACCAACACCACACCACACCGCTTACACCCGACCCGAAAACACCCACACCACACCAACACCACACCACATTACTCCCGTTACACCTACACCAACACCACACCTTTACACCACACCCAGCAACACCACACCAAATGGACACCACACCACACCACACCTTAGCCGATGTGCCGACACCGCTGTCGTCACACCAGTGACACCTTAGCGTACACACCACACCCAACACCTACACCACACCCGAAACACCTGACACCACACCACACCACACCCTACACCACACCATGACCACACACCAGCCGACACCACACCATACACCTACACCGAAACACCTTTCTACACCACACCACACCTGAACACCTAGTCACACCACGACACCAACACCTGACCACACCGGGGGACACCTTTGGAACGACACCTAACACCGCCACACCACACCACACCCGACACCTATAACACCACACCACACCACACCAAAGGCACACCTTAACACCCACACCAAGGGCTACACCACACCACACCTCCAAAACAAGGGACACCACACCCAACACCACACCACACCGCGTGGACACCACACCTTGACACCAAATTGTGCACACCACACCTGCACACCTTAAGAACGACACCGTCAGTACACCGAAACCCTATGACACCTGGGACACCTGGCACACCAACTACACCACACCCACACCACACACCTGGACACCGTTTCGCGAGTGTGGGTTGCTTGACACCACACCACACCGCGGCCTTACACCGCACACCGTAAACACCGTTGACACCTCATTACTCGACACCACACCGCACACCCACACCCGACACCGAACACCACACCTGGGCATACACACCACACCGTACACCTACACCACACCTGTGCTACACCAGGGGTACACCACACCTAGTACACCACACCGATACACCCACACCACACCACACCCACCAACACCACACCATCAAGAACACCCTATACACCCACACCACACCTACACCACACCCTACACCACACCACACCACACCATCGACACCTACACCACACCAACACCACACCAAACACCACACCCACACCCGGACACCACACCCACACCACACCATAACACCTAACACCACACACCTACACCTACTCTGCTAAACACCCAACACCTCTACACCCTGCCGACACCGCGACACCGGCGACACCCTGTTACACCACACCTCACACCTTCGACACCAGCCAGAGACACCGGACACCGACACCCCGAACACCAACACACCCGA"
#a.find_kterm_index(patter).each { |a| print "#{a} " }